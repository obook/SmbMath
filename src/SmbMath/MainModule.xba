<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="MainModule" script:language="StarBasic" script:moduleType="normal">REM  *****  BASIC  *****

Global PGM_INIT as Boolean
Global GLOBAL_MAKE_OLE as Integer &apos; 0 = NO insert OLE ; 1 = insert OLE

Sub Main

	&apos;Dim oSystemInfo as Variant
	&apos;oSystemInfo = GetConfigAccess(&quot;/com.obooklage.smbmath.Registry/SystemInfo&quot;, TRUE)
	&apos;MsgBox oSystemInfo.MakeOLE

	If PGM_INIT &lt;&gt; True Then
		GLOBAL_MAKE_OLE = 0
		PGM_INIT = True
	End If

	ShowDialog
	
End Sub

&apos; ######################################## Configuration

Function GetConfigAccess( ByVal cNodePath As String, Optional bWriteAccess, Optional bEnableSync, Optional bLazyWrite ) As Object
   If IsMissing( bWriteAccess ) Then
      bWriteAccess = False
   EndIf
   If IsMissing( bEnableSync ) Then
      bEnableSync = True
   EndIf
   If IsMissing( bLazyWrite ) Then
      bLazyWrite = False
   EndIf

   oConfigProvider = GetProcessServiceManager().createInstanceWithArguments(&quot;com.sun.star.configuration.ConfigurationProvider&quot;, Array( MakePropertyValue( &quot;enableasync&quot;, bEnableSync ) ) )
   
   If bWriteAccess Then
      cServiceName = &quot;com.sun.star.configuration.ConfigurationUpdateAccess&quot;
   Else
      cServiceName = &quot;com.sun.star.configuration.ConfigurationAccess&quot;
   EndIf
   
   oConfigAccess = oConfigProvider.createInstanceWithArguments( cServiceName, Array( MakePropertyValue( &quot;nodepath&quot;, cNodePath ), MakePropertyValue( &quot;lazywrite&quot;, bLazyWrite ) ) )
   
   GetConfigAccess() = oConfigAccess
End Function

Function MakePropertyValue( Optional cName As String, Optional uValue ) As com.sun.star.beans.PropertyValue
   oPropertyValue = createUnoStruct( &quot;com.sun.star.beans.PropertyValue&quot; )
   If Not IsMissing( cName ) Then
      oPropertyValue.Name = cName
   EndIf
   If Not IsMissing( uValue ) Then
      oPropertyValue.Value = uValue
   EndIf
   MakePropertyValue() = oPropertyValue
End Function 

&apos; ######################################## DialBox

Global oDialog As Object

private Function LoadDialog(Libname as String, DialogName as String, Optional oLibContainer)
Dim oLib as Object &apos; com.sun.star.script.XLibraryContainer
Dim oLibDialog as Object
Dim oRuntimeDialog as Object
    If IsMissing(oLibContainer) Then
        oLibContainer = DialogLibraries
    End If
    oLibContainer.LoadLibrary(LibName)
    oLib = oLibContainer.GetByName(Libname)
    oLibDialog = oLib.GetByName(DialogName)
    oRuntimeDialog = CreateUnoDialog(oLibDialog)
    LoadDialog() = oRuntimeDialog
End Function

private Sub ButtonValidation
	oControl = oDialog.GetControl(&quot;IdCheckBoxOLE&quot;)
	GLOBAL_MAKE_OLE = oControl.State
	oDialog.endexecute
End Sub

private Sub ShowDialog
    oDialog = LoadDialog(&quot;SmbMath&quot;, &quot;Dialog&quot;)
    oDialog.Title = &quot;Options SmbMath&quot;
	oControl = oDialog.GetControl(&quot;IdCheckBoxOLE&quot;)
	oControl.State = GLOBAL_MAKE_OLE
    oDialog.Execute()
End Sub

&apos; ***************************************************************************** Code insertion

Sub Formule(pFormula as String, Optional rewind as Integer)

	If IsMissing(rewind) Then rewind = 0
	
	If GLOBAL_MAKE_OLE = 0 Then
		EcritureFormule(pFormula, rewind)
	Else
		InsertionFormule(pFormula)
	EndIf

End Sub

Sub EcritureFormule(pFormula as String, Optional rewind as Integer)

	If IsMissing(rewind) Then rewind = 0

	&apos; ----------------------------------------------------------------------
	&apos; Define variables
	dim document   as object
	dim dispatcher as object
	&apos; ----------------------------------------------------------------------
	&apos; Get access to the document
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	&apos; ----------------------------------------------------------------------
	dim args1(0) as new com.sun.star.beans.PropertyValue
	args1(0).Name = &quot;Text&quot;
	args1(0).Value = pFormula

	dispatcher.executeDispatch(document, &quot;.uno:InsertText&quot;, &quot;&quot;, 0, args1())
	
	If rewind &lt;&gt; 0 Then
		&apos; Revenir rewind fois en arrière
		dim args2(1) as new com.sun.star.beans.PropertyValue
		args2(0).Name = &quot;Count&quot;
		args2(0).Value = 1
		args2(1).Name = &quot;Select&quot;
		args2(1).Value = false
		For iCount = 1 To rewind
	       	dispatcher.executeDispatch(document, &quot;.uno:GoLeft&quot;, &quot;&quot;, 0, args2())
	    Next iCount
    EndIf
    
End Sub

&apos; ***************************************************************************** Object OLE insertion
&apos; Source : Pierre-Yves Samyn https://listarchives.libreoffice.org/fr/users/2014/msg00501.html
&apos; Source : 谢宝良 http://forum.ubuntu.org.cn/viewtopic.php?f=35&amp;t=400116
Sub InsertionFormule(Optional pFormula as String)
	
	If IsMissing(pFormula) Then pFormula = &quot;2x^2-5x+1=0&quot;
	
	oViewCursor = ThisComponent.getCurrentController().getViewCursor()
	oTextCursor=oViewCursor.Text.createTextCursorByRange(oViewCursor)
	obj=ThisComponent.CreateInstance(&quot;com.sun.star.text.TextEmbeddedObject&quot;)
	obj.CLSID=&quot;078B7ABA-54FC-457F-8551-6147e776a997&quot;
	obj.AnchorType=com.sun.star.text.TextContentAnchorType.AS_CHARACTER
	oTextCursor.Text.insertTextContent(oTextCursor, obj, true)
	obj.model.formula=pFormula
	&apos; Update:
	oXCOEO = obj.ExtendedControlOverEmbeddedObject
	oXCOEO.update()

End Sub

Sub Fraction &apos; M1

	pFormula = &quot;{ a } over { b }&quot; REM Revenir 11 fois en arrière
	Formule(pFormula, 13)
	
End Sub

Sub SquareRoot &apos; M2

	pFormula = &quot;sqrt{ a }&quot;
	Formule(pFormula, 2)

End Sub

Sub Expression &apos; M3

	pFormula = Chr(34)+Chr(34)+&quot;A={ 3x+1 } newline&quot;
	Formule(pFormula, 10)

End Sub

Sub Vecteur &apos; M4

	pFormula = &quot;widevec{AB}&quot;
	Formule(pFormula, 1)
	
End Sub

Sub VecteurCoordonnees &apos; M5

	pFormula = &quot;widevec {AB} left( matrix { x_B - x_A ## y_B - y_A } right)&quot;
	Formule(pFormula)

End Sub

Sub Angle &apos; M6

	pFormula = &quot;widehat{ABC}&quot;
	Formule(pFormula, 1)

End Sub

Sub Ensembles &apos; M7

	pFormula = &quot;setN subset setZ subset D subset setQ subset setR subset setC&quot;
	Formule(pFormula)
	
End Sub

Sub Systeme &apos; M8

	pFormula =  &quot;alignl left lbrace stack{ { 2x + 3y = 7 } # { -3x + 2y = -4 } } right none&quot;
	Formule(pFormula)

End Sub

Sub Implication &apos; M9

	pFormula =  &quot;A drarrow B&quot;
	Formule(pFormula)

End Sub

Sub Equivalence &apos; M10

	pFormula =  &quot;A dlrarrow B&quot;
	Formule(pFormula)
	
End Sub

Sub Exposant &apos; M11

	pFormula =  &quot;A^{ B }&quot;
	Formule(pFormula, 2)
	
End Sub

Sub Indice &apos; M12

	pFormula =  &quot;A_{ B }&quot;
	Formule(pFormula)
	
End Sub

Sub Fonction &apos; M13

	pFormula =  &quot;f:x ↦ 2x+3&quot;
	Formule(pFormula)
	
End Sub

Sub Operations &apos; M14

	pFormula = Chr(34)+Chr(34)+&quot;A=1 + 2 - 3 times 4 div 5&quot;
	Formule(pFormula)
	
End Sub


</script:module>